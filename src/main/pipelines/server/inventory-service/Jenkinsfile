pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/maurolisena/inventory-service.git'
        BRANCH = 'main'
        PROJECT_DIR = 'inventory-service'
        SONARQUBE_ENV = 'SonarQube'
    }

    stages {
        stage('Clonar código fuente') {
            steps {
                git branch: "${BRANCH}", credentialsId: 'GitHub', url: "${REPO_URL}"
            }
        }

        stage('Build y análisis estático') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh '''
                            mvn clean compile sonar:sonar \
                              -Dsonar.projectKey=inventory-service \
                              -Dsonar.host.url=http://sonarqube:9000 \
                              -Dsonar.login=$SONAR_AUTH_TOKEN \
                              -Dsonar.java.binaries=target/classes
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Limpiar contenedores y volúmenes') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh '''
                        docker compose down --volumes --remove-orphans
                        docker volume rm mysql_database_data || true
                    '''
                }
            }
        }

        stage('Construir y levantar servicios') {
            steps {
                echo "Construyendo imágenes y levantando servicios en background"
                sh 'docker compose up -d --build'
            }
        }

        stage('Esperar a MySQL listo') {
            steps {
                echo "Esperando que MySQL esté saludable..."
                script {
                    def retries = 10
                    def wait = 15
                    for (int i = 0; i < retries; i++) {
                        def result = sh(script: "docker exec mysql_inventory_database mysqladmin ping -h 127.0.0.1 -u mlisena --password=A8424628 --silent", returnStatus: true)
                        if (result == 0) {
                            echo "MySQL está listo"
                            break
                        } else {
                            echo "Esperando MySQL (${i + 1}/$retries)..."
                            sleep(wait)
                        }
                        if (i == retries - 1) {
                            error("MySQL no respondió después de ${retries * wait} segundos.")
                        }
                    }
                }
            }
        }

        stage('Verificar contenedores y logs de MySQL') {
            steps {
                echo "Listando contenedores activos"
                sh 'docker ps'

                echo "Mostrando últimos logs de mysql_inventory_database para verificar scripts init"
                sh 'docker logs --tail 30 mysql_inventory_database'
            }
        }
    }

    post {
        always {
            echo 'Pipeline finalizado'
        }
    }
}