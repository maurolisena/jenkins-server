pipeline {
    agent any

    environment {
            REPO_URL = 'https://github.com/maurolisena/product-service.git'
            BRANCH = 'main'
            PROJECT_DIR = 'product-service'
            SONARQUBE_ENV = 'SonarQube'
    }

    stages {

        stage('Clonar código fuente') {
            steps {
                git branch: "${BRANCH}", credentialsId: 'GitHub', url: "${REPO_URL}"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh '''
                            mvn clean compile sonar:sonar \
                              -Dsonar.projectKey=product-service \
                              -Dsonar.host.url=http://sonarqube:9000 \
                              -Dsonar.login=$SONAR_AUTH_TOKEN \
                              -Dsonar.java.binaries=target/classes
                        '''
                    }
                }
            }
        }

        stage('SonarQube Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Limpiar contenedores y volúmenes') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh '''
                        docker compose down --volumes --remove-orphans
                    '''
                }
            }
        }

        stage('Construir y levantar servicios') {
            steps {
                echo "Construyendo imágenes y levantando servicios en background"
                sh 'docker compose up -d --build'
            }
        }

    }

    post {
        always {
            echo 'Pipeline finalizado'
        }
    }
}